@use './variables' as *;

@mixin limitLine($lines) {
  & {
    display: -webkit-box;
    line-clamp: $lines;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    text-overflow: ellipsis;
    overflow: hidden;
  }
}

@mixin minWidth($min-width) {
  @media only screen and (min-width: $min-width) {
    @content;
  }
}

@mixin maxWidth($max-width) {
  @media only screen and (max-width: $max-width) {
    @content;
  }
}

@mixin resFont($min-size, $max-size, $important: false) {
  $font-size: #{$max-size}rem;

  @if $important {
    $font-size: #{$max-size}rem !important;
  }

  font-size: $font-size;

  @include maxWidth($lg) {
    $font-size: calc(#{$max-size}rem - ((#{$max-size}rem - #{$min-size}rem)) / 2);

    @if $important {
      $font-size: calc(#{$max-size}rem - ((#{$max-size}rem - #{$min-size}rem)) / 2) !important;
    }

    font-size: $font-size;
  }

  @include maxWidth($sm) {
    $font-size: #{$min-size}rem;

    @if $important {
      $font-size: #{$min-size}rem !important;
    }

    font-size: $font-size;
  }
}


@mixin aspectRatio($ratio: 16/9) {
  height: 0;
  padding-bottom: 100% / $ratio;
  @supports (aspect-ratio: 16/9) {
    aspect-ratio: $ratio;
    height: initial;
    padding-bottom: initial;
  }
}

@mixin ulReset {
  padding: 0;
  margin: 0;
  list-style-type: none;
}

@mixin fontAwesome {
  position: absolute;
  display: inline-block;
  font-style: normal;
  font-variant: normal;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  font-family: "Font Awesome 5 Free";
  font-weight: 900;
}


@mixin transition {
  & {
    transition: all 0.25s ease-in-out 0s;
    -moz-transition: all 0.25s ease-in-out 0s;
    -o-transition: all 0.25s ease-in-out 0s;
    -webkit-transition: all 0.25s ease-in-out 0s;
    -ms-transition: all 0.25s ease-in-out 0s;
  }
}

@mixin breakText {
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
}

@mixin delay($rule, $number, $value) {
  @for $i from 1 to ($number + 1) {
    &:nth-child(#{$i}) {
      -webkit-#{$rule}-delay: (#{$i * $value});
      #{$rule}-delay: (#{$i * $value});
    }
  }
}


@mixin iconify($icon, $w, $h: auto) {
  height: $h;
  width: $w;
  background-image: url("https://api.iconify.design/#{$icon}.svg");
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center;
  cursor: pointer;
}

@mixin iconify-mask($icon, $w, $h: auto, $color: currentColor) {
  height: $h;
  width: $w;
  background-color: $color;
  -webkit-mask: url("https://api.iconify.design/#{$icon}.svg") no-repeat center;
  mask: url("https://api.iconify.design/#{$icon}.svg") no-repeat center;
  -webkit-mask-size: contain;
  mask-size: contain;
  cursor: pointer;
}

@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin grid($columns: 1, $gap: 0) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

@mixin hover($properties...) {
  @media (hover: hover) {
    &:hover {
      @each $property, $value in $properties {
        #{$property}: $value;
      }
    }
  }
}

@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}

@mixin animate($name, $duration: 1s, $timing: ease, $delay: 0s, $iteration: 1) {
  animation: $name $duration $timing $delay $iteration;
}

@mixin aos($animation, $delay: 0, $duration: 1000, $once: true) {
  &[data-aos="#{$animation}"] {
    data-aos: $animation;
    data-aos-delay: $delay;
    data-aos-duration: $duration;
    data-aos-once: $once;
  }
}

@mixin placeholder($color: #000) {
  &::placeholder {
    color: $color;
  }
}
